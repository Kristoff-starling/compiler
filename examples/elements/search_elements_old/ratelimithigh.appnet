state {
	last: Instant
	limit: float
	token: float
	per_sec: float
}

fn init() {
	last := current_time();
	limit := 900.0;
	token := 900.0;
	per_sec := 900.0;
}

fn req(rpc) {
	token := min(limit, token + (per_sec * time_diff(current_time(), last)));
	last := current_time();
    match (token > 1.0) {
		true => {
			token := token - 1.0;
			send(rpc, Down);
        }
		false => {
			send(err('ratelimit'), Up);
		}
	};
}

fn resp(rpc) {
    send(rpc, Up);
}
