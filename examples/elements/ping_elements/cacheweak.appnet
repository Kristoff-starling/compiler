state
{
	@consistency(weak) @combiner(sum) @persistence(true)
	cache: Map<string, string>
}

fn init() {
}


fn req(rpc) {
    res := cache.get(rpc.get('body'));
	match (res) {
		Some(name) => {
            match (name) {
                'cached' => {
                    send(err('200'), Up);
                }
                _ => {
                    send(err('403'), Up);
                }
            };
		}
		None => {
			send(rpc, Down);
		}
	};
}

fn resp(rpc) {
    key := rpc.get('body');
	cache.set(key, 'cached');
	send(rpc, Up);
}
